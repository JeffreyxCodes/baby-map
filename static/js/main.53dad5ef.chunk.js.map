{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["APIKEY","process","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","LM","window","L","mapquest","key","map","undefined","icons","base","primaryColor","secondaryColor","shadow","size","symbol","state","baseGeoLocation","range","_this2","center","layers","tileLayer","zoom","addControl","control","searchControl","className","hoverMarker","icon","iconOptions","search","sort","circle","concat","pageSize","searchInput","searchAheadOptions","limit","collection","compactResults","placeholderText","clearTitle","searchLayer","buffer","collisionMargin","marker","popupEnabled","searchResponse","updateResultsOnMapMove","addTo","locate","setView","maxZoom","enableHighAccuracy","once","e","setState","latlng","lat","lng","flag","draggable","radius","react_default","a","createElement","id","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAEMA,EAASC,mCAiHAC,cA9Gb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,GAAKC,OAAOC,EAAEC,SACnBV,EAAKO,GAAGI,IAAMd,EACdG,EAAKY,SAAMC,EACXb,EAAKc,MAAQ,CACXC,KAAM,CACJC,aAAc,UACdC,eAAgB,UAChBC,QAAQ,EACRC,KAAM,KACNC,OAAQ,UAIZpB,EAAKqB,MAAQ,CACXC,gBAAiB,CAAC,WAAY,WAC9BC,MAAO,KAlBGvB,mFAsBM,IAAAwB,EAAArB,KAElBA,KAAKS,IAAMT,KAAKI,GAAGK,IAAI,MAAO,CAC5Ba,OAAQtB,KAAKkB,MAAMC,gBACnBI,OAAQvB,KAAKI,GAAGoB,UAAU,OAC1BC,KAAM,KAIRzB,KAAKS,IAAIiB,WAAW1B,KAAKI,GAAGuB,WAGR3B,KAAKI,GAAGwB,cAAc,CACxCC,UAAW,GACXC,YAAa,CACXC,KAAM,SACNC,YAAa,CACXhB,KAAM,KACNH,aAAc,UACdC,eAAgB,YAGpBmB,OAAQ,CACNC,KAAM,YACNC,OAAM,GAAAC,OAAKpC,KAAKkB,MAAMC,gBAAgB,GAAhC,KAAAiB,OAAsCpC,KAAKkB,MAAMC,gBAAgB,GAAjE,KAAAiB,OAAuEpC,KAAKkB,MAAME,OACxFiB,SAAU,IAEZC,YAAa,CACXC,mBAAoB,CAClBC,MAAO,EACPC,WAAY,oDAEdC,gBAAgB,EAChBC,gBAAiB,SACjBC,WAAY,gBAEdC,YAAa,CACXC,OAAQ,IACRC,gBAAiB,EACjBC,OAAQ,CACNjB,KAAM,MACNC,YAAa,CACXnB,aAAc,UACdC,eAAgB,UAChBE,KAAM,MAERiC,cAAc,GAIhBC,eAAgB,GAChBC,wBAAwB,KAEzBC,MAAMpD,KAAKS,KAGdT,KAAKS,IAAI4C,OAAO,CACdC,SAAS,EACTC,QAAS,GACTC,oBAAoB,IAItBxD,KAAKS,IAAIgD,KAAK,gBAAiB,SAACC,GAC9BrC,EAAKsC,SAAS,CACZxC,gBAAiB,CAACuC,EAAEE,OAAOC,IAAKH,EAAEE,OAAOE,MACxC,WAEDzD,OAAOC,EAAE0C,OAAO3B,EAAKH,MAAMC,gBAAiB,CAC1CY,KAAMV,EAAKjB,GAAGO,MAAMoD,KAAK1C,EAAKV,MAAMC,MACpCoD,WAAW,IACVZ,MAAM/B,EAAKZ,KAGdJ,OAAOC,EAAE6B,OAAOd,EAAKH,MAAMC,gBAAiB,CAAE8C,OAAQ5C,EAAKH,MAAME,QAASgC,MAAM/B,EAAKZ,0CAMzF,OACEyD,EAAAC,EAAAC,cAAA,OAAKvC,UAAU,OACbqC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,gBAzGEC,aCQEC,QACW,cAA7BlE,OAAOmE,SAASC,UAEe,UAA7BpE,OAAOmE,SAASC,UAEhBpE,OAAOmE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOV,EAAAC,EAAAC,cAACS,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.53dad5ef.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst APIKEY = process.env.REACT_APP_API_KEY;\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.LM = window.L.mapquest;\n    this.LM.key = APIKEY;\n    this.map = undefined;\n    this.icons = {\n      base: {\n        primaryColor: '#1BC587',\n        secondaryColor: '#1BC587',\n        shadow: true,\n        size: 'md',\n        symbol: 'Start'\n      }\n    }\n\n    this.state = {\n      baseGeoLocation: [43.642567, -79.387054],\n      range: 10000,\n    }\n  }\n\n  componentDidMount() {\n    // get map to display\n    this.map = this.LM.map('map', {\n      center: this.state.baseGeoLocation,\n      layers: this.LM.tileLayer('map'),\n      zoom: 12\n    });\n\n    // add controls\n    this.map.addControl(this.LM.control());\n\n    // add search controls\n    let searchControl = this.LM.searchControl({\n      className: '',\n      hoverMarker: {\n        icon: 'marker',\n        iconOptions: {\n          size: 'sm',\n          primaryColor: '#333333',\n          secondaryColor: '#333333'\n        }\n      },\n      search: {\n        sort: 'relevance',\n        circle: `${this.state.baseGeoLocation[1]},${this.state.baseGeoLocation[0]},${this.state.range}`,\n        pageSize: 20\n      },\n      searchInput: {\n        searchAheadOptions: {\n          limit: 6,\n          collection: 'address,adminArea,airport,poi,category,franchise'\n        },\n        compactResults: true,\n        placeholderText: 'Search',\n        clearTitle: 'Clear search'\n      },\n      searchLayer: {\n        buffer: 256,\n        collisionMargin: 2,\n        marker: {\n          icon: 'via',\n          iconOptions: {\n            primaryColor: '#ffffff',\n            secondaryColor: '#333333',\n            size: 'lg'\n          },\n          popupEnabled: true\n        },\n        // paddingTopLeft: [420, 20],\n        // paddingBottomRight: [20, 20],\n        searchResponse: {},\n        updateResultsOnMapMove: true\n      }\n    }).addTo(this.map);\n\n    // locate your location and center your map on it\n    this.map.locate({\n      setView: true,\n      maxZoom: 12,\n      enableHighAccuracy: true,\n    })\n\n    // once current location is found, set it to base\n    this.map.once('locationfound', (e) => {\n      this.setState({\n        baseGeoLocation: [e.latlng.lat, e.latlng.lng]\n      }, () => {\n        // put a marker on it\n        window.L.marker(this.state.baseGeoLocation, {\n          icon: this.LM.icons.flag(this.icons.base),\n          draggable: false\n        }).addTo(this.map);\n\n        // add circle around base\n        window.L.circle(this.state.baseGeoLocation, { radius: this.state.range }).addTo(this.map);\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"map\"></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}